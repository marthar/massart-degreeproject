{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialState","detail","entries","viewReducer","state","action","type","console","log","id","processEntries","data","map","entry","idx","keys","thumb","poster","split","slugs","youtube","length","toLowerCase","first_name","last_name","name","abstract","time","room","title","GalleryDetail","useParams","find","useEffect","window","scrollTo","Fragment","to","className","src","target","href","item","key","frameBorder","allow","allowFullScreen","GalleryItem","App","useReducer","dispatch","Tabletop","init","simpleSheet","then","tabletop","exact","path","index","children","renderContent","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5105147c.chunk.js","sourcesContent":["import './App.css';\n\nimport React, { useReducer, useRef, useEffect, useLayoutEffect, useCallback, forwardRef } from \"react\"\nimport PropTypes from 'prop-types';\n\nimport Tabletop from \"tabletop\"\n\nimport { map, keys, find } from \"lodash\"\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams\n} from \"react-router-dom\";\n\n\n\nconst initialState = {\n  detail: null,\n  entries: []\n}\n\nconst viewReducer = (state, action) => {\n  switch(action.type) { \n    case \"ENTRIES\":\n      return { ...state, entries: action.entries }\n    case \"VIEW\":\n      console.log(action)\n      return { ...state, detail: action.id }\n    default:\n      return state;\n\n  }\n}\n\nfunction processEntries(data) {\n   let entries = map(data, (entry,idx) => { \n\n     /*\n     */\n     console.log(keys(entry))\n\n     let thumb = entry[\"Poster Thumbnail\"];\n     let poster = entry[\"Poster Full Size\"];\n\n     thumb = thumb.split(\"=\")[1]\n     poster = poster.split(\"=\")[1]\n\n     thumb = \"https://drive.google.com/uc?export=download&id=\" + thumb;\n     poster = \"https://drive.google.com/uc?export=download&id=\" + poster;\n\n     let slugs = (entry[\"YouTube Link\"]||\"\").split(\"/\")\n     let youtube = slugs[slugs.length-1]\n\n     return {\n       id: entry['Last Name'].toLowerCase(),\n       thumb: thumb,\n       poster: poster,\n       first_name: entry['First Name'],\n       last_name: entry['Last Name'],\n       name: `${entry['First Name']} ${entry['Last Name']}`,\n       abstract: entry[\"Abstract\"],\n       time: entry[\"Time\"],\n       room: entry[\"Room Link\"],\n       youtube: youtube,\n       title: entry[\"Title\"]\n     }\n   })\n   console.log(entries)\n   return  entries\n}\n\nfunction GalleryDetail({entries}) {\n  let { id } = useParams();\n  let entry= find(entries, (entry) => entry.id == id.toLowerCase())\n\n\n\n  useEffect(() => {\n    window.scrollTo(0,0)\n  },[])\n\n  if(!entry) {\n    return <React.Fragment/>\n  }\n\n  return <React.Fragment>\n         <header>\n        <Link to=\"/\"> <h3 className=\"back\"><div>&laquo;</div> Online Symposium May 12th 2020</h3></Link>\n        <h1>{entry.title}</h1>\n        <h2>{entry.name}</h2>\n        </header>\n      \n        <section className=\"work\">\n            <div className='work-image'><img src={entry.poster} /></div>\n            <div className=\"time\">\n              <h2>{entry.time}</h2>\n              <a target=\"_blank\"  href={entry.room}><h2 className=\"button\">Join Event</h2></a>\n            </div>\n            {entry.abstract.split('\\n\\n').map((item, key) => {\n              return <p key={key}>{item}</p>\n            })}\n            <div className=\"video\">\n              <iframe src={`https://www.youtube.com/embed/${entry.youtube}`} frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n            </div>  \n            <div className=\"time\">\n              <h2>{entry.time}</h2>\n              <a target=\"_blank\" href={entry.room}><h2 className=\"button\">Join Event</h2></a>\n            </div>\n        </section>\n        </React.Fragment>;\n}\n\nfunction GalleryItem({entry}) {\n  return  <Link to={`/${entry.id}`}>\n              <div className=\"piece\" >\n                <div className='piece-image'><img src={entry.thumb} /></div>  \n                <h1>{entry.title}</h1>\n                <h2>{entry.name}</h2>\n              </div>\n           </Link>;\n}\n\n\nfunction renderContent(detail,entries,dispatch) {\n  if(detail !== null) {\n    return \n  } else {\n    return  <React.Fragment>\n     \n    </React.Fragment>\n  }\n}\n\nfunction App() {\n  const [\n    {\n      detail,\n      entries\n    },\n    dispatch\n  ] = useReducer(viewReducer, initialState)\n\n\n  useEffect(() => { \n    Tabletop.init( {\n      key: 'https://docs.google.com/spreadsheets/d/1lzAodBh1ohPURnCNYbx-CgA00TEzRFi4G4qE7_Z3UX0/edit?usp=sharing',\n      simpleSheet: true }\n    ).then(function(data, tabletop) { \n      dispatch({ type: \"ENTRIES\", entries: processEntries(data) })\n   }) }, []);\n\n\n\n  return (\n    <Router>\n    <div>\n    <Switch>\n          <Route exact path=\"/\">\n            <header>\n              <h3>Online Symposium May 12th 2020</h3>\n              <h1>Degree Project <br/>Symposium</h1>\n              <h2>Communication Design Senior Class</h2>\n            </header>\n            <section id=\"gallery\">\n              {map(entries, (entry,index) => <GalleryItem entry={entry} key={index} />) }\n            </section>\n          </Route>\n          <Route path=\"/:id\" children={<GalleryDetail entries={entries} />} />\n        </Switch>\n        {renderContent(detail,entries, dispatch)}\n      <footer>\n        <h3><img src=\"light-logo.png\" />621 Huntington Avenue, Boston, MA, 02115 | 617.879.7000 | </h3>\n      </footer>\n     </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}